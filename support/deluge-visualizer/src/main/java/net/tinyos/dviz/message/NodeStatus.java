/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'NodeStatus'
 * message type.
 */

package net.tinyos.dviz.message;

public class NodeStatus extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 85;

    /** Create a new NodeStatus of size 10. */
    public NodeStatus() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new NodeStatus of the given data_length. */
    public NodeStatus(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus with the given data_length
     * and base offset.
     */
    public NodeStatus(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus using the given byte array
     * as backing store.
     */
    public NodeStatus(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus using the given byte array
     * as backing store, with the given base offset.
     */
    public NodeStatus(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public NodeStatus(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus embedded in the given message
     * at the given base offset.
     */
    public NodeStatus(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeStatus embedded in the given message
     * at the given base offset and length.
     */
    public NodeStatus(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <NodeStatus> \n";
      try {
        s += "  [nodeId=0x"+Long.toHexString(get_nodeId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [groupId=0x"+Long.toHexString(get_groupId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [state=0x"+Long.toHexString(get_state())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [appUid=0x"+Long.toHexString(get_appUid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeId
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeId' is signed (false).
     */
    public static boolean isSigned_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'nodeId' is an array (false).
     */
    public static boolean isArray_nodeId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeId'
     */
    public static int offset_nodeId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeId'
     */
    public static int offsetBits_nodeId() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'nodeId'
     */
    public long get_nodeId() {
        return (long)getUIntBEElement(offsetBits_nodeId(), 32);
    }

    /**
     * Set the value of the field 'nodeId'
     */
    public void set_nodeId(long value) {
        setUIntBEElement(offsetBits_nodeId(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeId'
     */
    public static int size_nodeId() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeId'
     */
    public static int sizeBits_nodeId() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: groupId
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'groupId' is signed (false).
     */
    public static boolean isSigned_groupId() {
        return false;
    }

    /**
     * Return whether the field 'groupId' is an array (false).
     */
    public static boolean isArray_groupId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'groupId'
     */
    public static int offset_groupId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'groupId'
     */
    public static int offsetBits_groupId() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'groupId'
     */
    public short get_groupId() {
        return (short)getUIntBEElement(offsetBits_groupId(), 8);
    }

    /**
     * Set the value of the field 'groupId'
     */
    public void set_groupId(short value) {
        setUIntBEElement(offsetBits_groupId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'groupId'
     */
    public static int size_groupId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'groupId'
     */
    public static int sizeBits_groupId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: state
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'state' is signed (false).
     */
    public static boolean isSigned_state() {
        return false;
    }

    /**
     * Return whether the field 'state' is an array (false).
     */
    public static boolean isArray_state() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'state'
     */
    public static int offset_state() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'state'
     */
    public static int offsetBits_state() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'state'
     */
    public short get_state() {
        return (short)getUIntBEElement(offsetBits_state(), 8);
    }

    /**
     * Set the value of the field 'state'
     */
    public void set_state(short value) {
        setUIntBEElement(offsetBits_state(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'state'
     */
    public static int size_state() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'state'
     */
    public static int sizeBits_state() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: appUid
    //   Field type: long, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'appUid' is signed (false).
     */
    public static boolean isSigned_appUid() {
        return false;
    }

    /**
     * Return whether the field 'appUid' is an array (false).
     */
    public static boolean isArray_appUid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'appUid'
     */
    public static int offset_appUid() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'appUid'
     */
    public static int offsetBits_appUid() {
        return 48;
    }

    /**
     * Return the value (as a long) of the field 'appUid'
     */
    public long get_appUid() {
        return (long)getUIntBEElement(offsetBits_appUid(), 32);
    }

    /**
     * Set the value of the field 'appUid'
     */
    public void set_appUid(long value) {
        setUIntBEElement(offsetBits_appUid(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'appUid'
     */
    public static int size_appUid() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'appUid'
     */
    public static int sizeBits_appUid() {
        return 32;
    }

}
